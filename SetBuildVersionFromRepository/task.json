{
    "id": "7db8e479-9e5c-4f39-aac4-480335187cef",
    "name": "setbuildversionfromrepository",
    "friendlyName": "Set Build Version from Version file",
    "description": "Reads a version from a file, extends this version by the current build information (revision) and sets it into the environment for other tasks to use.",
    "helpMarkDown": "This step makes it easier to use semver on your repositories: \n- You can save your version in your repositories and manage breaking changes on your regular workflow.\n- The version is managed in a simple text file (just containing the version)\n- This text file can be generated by previous steps\n- Every build still gets it's unique version by appending a unique build number (as suggested in the spec)\n- Will automatically upload the version as an artifact (will be automatically detected by the step later).",
    "category": "Utility",
    "author": "Matthias Dittrich",
    "version": {
        "Major": 0,
        "Minor": 2,
        "Patch": 13
    },
    "instanceNameFormat": "Read version from $(versionTextFile)",
    "groups": [
        {
            "name": "variables",
            "displayName": "Variables",
            "isExpanded": false
        },
        {
            "name": "advanced",
            "displayName": "Advanced",
            "isExpanded": false
        }
    ],
    "inputs": [
        {
            "name": "versionTextFile",
            "type": "filePath",
            "label": "Path to the version file",
            "defaultValue": "Version/Version.txt",
            "required": true,
            "helpMarkDown": "A path to the version text file to read the version from."
        },
        {
            "name": "generatePatch",
            "type": "boolean",
            "label": "Generate patch number",
            "defaultValue": "false",
            "required": false,
            "helpMarkDown": "If this is true, this task will generate the patch version as well. The recommendation is to leave this flag `false`. However this makes the release build fail when nobody remembers to increase the version. Some teams might have a different oppinion on this."
        },
        {
            "name": "majorVersionVariableName",
            "type": "string",
            "label": "variable for the major part",
            "defaultValue": "ProjectVersion_Major",
            "required": false,
            "helpMarkDown": "We will save the version part in a Azure-DevOps variable as well as in an environment variable with the same name.",
            "groupName": "variables"
        },
        {
            "name": "minorVersionVariableName",
            "type": "string",
            "label": "variable for the minor part",
            "defaultValue": "ProjectVersion_Minor",
            "required": false,
            "helpMarkDown": "We will save the version part in a Azure-DevOps variable as well as in an environment variable with the same name.",
            "groupName": "variables"
        },
        {
            "name": "patchVersionVariableName",
            "type": "string",
            "label": "variable for the patch part",
            "defaultValue": "ProjectVersion_Patch",
            "required": false,
            "helpMarkDown": "We will save the version part in a Azure-DevOps variable as well as in an environment variable with the same name.",
            "groupName": "variables"
        },
        {
            "name": "maxPatchVersion",
            "type": "string",
            "label": "highest admissible pact number (otherwise wrap around)",
            "defaultValue": "65535",
            "required": false,
            "helpMarkDown": "We will wrap-around the the patch part when the maximum number gets passed.",
            "groupName": "variables"
        },
        {
            "name": "specialVersionVariableName",
            "type": "string",
            "label": "variable for the special part",
            "defaultValue": "ProjectVersion_Special",
            "required": false,
            "helpMarkDown": "For example an '-alpha1' part. We will save the version part in a Azure-DevOps variable as well as in an environment variable with the same name.",
            "groupName": "variables"
        },
        {
            "name": "versionVariableName",
            "type": "string",
            "label": "variable for the full release version",
            "defaultValue": "ProjectVersion",
            "required": false,
            "helpMarkDown": "We will save the version part in a Azure-DevOps variable as well as in an environment variable with the same name.",
            "groupName": "variables"
        },
        {
            "name": "ciVersionVariableName",
            "type": "string",
            "label": "variable for the ci version for this build",
            "defaultValue": "ProjectVersion_CI",
            "required": false,
            "helpMarkDown": "Specially named version to indicate version released from CI. We will save the version part in a Azure-DevOps variable as well as in an environment variable with the same name. Use this version to release packages from a CI build.",
            "groupName": "variables"
        },
        {
            "name": "artifactName",
            "type": "string",
            "label": "Artifact name",
            "defaultValue": "VersionInformation",
            "required": true,
            "helpMarkDown": "Usually this doesn't need to be changed. If changed change in the corresponding release build as well.",
            "groupName": "advanced"
        },
        {
            "name": "cwd",
            "type": "filePath",
            "label": "Working Directory",
            "defaultValue": "$(System.DefaultWorkingDirectory)",
            "helpMarkDown": "Working directory for this command.",
            "groupName": "advanced"
        }
    ],
    "execution": {
        "Node": {
            "target": "fromrepository.js"
        }
    }
}